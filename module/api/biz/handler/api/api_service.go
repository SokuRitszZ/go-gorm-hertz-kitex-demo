// Code generated by hertz generator.

package api

import (
	"context"

	"ghkd/kitex_gen/note"
	"ghkd/kitex_gen/user"
	api "ghkd/module/api/biz/model/api"
	"ghkd/module/api/biz/mw"
	"ghkd/module/api/biz/rpc"
	"ghkd/pkg/consts"
	"ghkd/pkg/errno"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
)

// CreateUser .
// @router /user/register [POST]
func CreateUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.CreateUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return 
	}
	err = rpc.CreateUser(context.Background(), &user.CreateUserRequest{
		Name: req.Name,
		Password: req.Password,
	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return 
	}
	SendResponse(c, errno.Success, nil)
}

// CheckUser .
// @router /user/login [POST]
func CheckUser(ctx context.Context, c *app.RequestContext) {
	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// CreateNote .
// @router /note [POST]
func CreateNote(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.CreateNoteRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	v, _ := c.Get(consts.IdentityKey)
	err = rpc.CreateNote(context.Background(), &note.CreateNoteRequest{
		Title: req.Title,
		Content: req.Content,
		UserId: v.(*api.User).ID,
	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return 
	}
	SendResponse(c, errno.Success, nil)
}

// QueryNote .
// @router /note/query [GET]
func QueryNote(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.QueryNoteRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return 
	}
	v, _ := c.Get(consts.IdentityKey)
	notes, total, err := rpc.QueryNotes(context.Background(), &note.QueryNoteRequest{
		UserId: v.(*api.User).ID,
		SearchKey: req.SearchKey,
		Offset: req.Offset,
		Limit: req.Limit,
	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return 
	}
	SendResponse(c, errno.Success, utils.H{
		"total": total,
		"notes": notes,
	})
}

// UpdateNote .
// @router /note/:note_id [PUT]
func UpdateNote(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UpdateNoteRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	v, _ := c.Get(consts.IdentityKey)
	err = rpc.UpdateNote(context.Background(), &note.UpdateNoteRequest{
		NoteId: req.NoteID,
		UserId: v.(*api.User).ID,
		Title: req.Title,
		Content: req.Content,
	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return 
	}
	SendResponse(c, errno.Success, nil)
}

// DeleteNote .
// @router /note/:note_id [DELETE]
func DeleteNote(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DeleteNoteRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}

	v, _ := c.Get(consts.IdentityKey)
	err = rpc.DeleteNote(context.Background(), &note.DeleteNoteRequest{
		NoteId: req.NoteID,
		UserId: v.(*api.User).ID,
	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return 
	}
	SendResponse(c, errno.Success, nil)
}
